name: Docker Build and Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

  versioning:
    runs-on: ubuntu-latest
    needs: build

    outputs:
      NEW_TAG: ${{ steps.increment_version.outputs.NEW_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the current tag on main
        id: get_tag
        continue-on-error: true
        run: |
          git fetch --tags
          CURRENT_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV

      - name: Get the last commit message and prefix
        id: get_last_commit_message
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$LAST_COMMIT_MESSAGE" | grep -q "Merge pull request"; then
            # Get the commit message from the PR
            PR_COMMIT_MESSAGE=$(git log -2 --pretty=%B | tail -n 1)
            COMMIT_MESSAGE=$PR_COMMIT_MESSAGE
          else
            COMMIT_MESSAGE=$LAST_COMMIT_MESSAGE
          fi
          COMMIT_MESSAGE_PREFIX=$(echo "$COMMIT_MESSAGE" | awk -F: '{print $1}' | tr '[:upper:]' '[:lower:]')
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE_PREFIX=$COMMIT_MESSAGE_PREFIX" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          TAG=${{ env.CURRENT_TAG }}
          VERSION=$(echo $TAG | sed 's/^v//')
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if echo "${{ env.COMMIT_MESSAGE_PREFIX }}" | grep -iqE "^(breaking|feature|fix|other|revert)"; then
            PREFIX=$(echo "${{ env.COMMIT_MESSAGE_PREFIX }}" | tr '[:upper:]' '[:lower:]')
            case $PREFIX in
              breaking)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              feature)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              fix)
                PATCH=$((PATCH + 1))
                ;;
              other|revert)
                NEW_TAG=$TAG
                ;;
              *)
                NEW_TAG=$TAG
                ;;
            esac
          else
            NEW_TAG=$TAG
          fi

          if [ -z "$NEW_TAG" ]; then
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "::set-output name=NEW_TAG::$NEW_TAG"

      - name: Create new tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ steps.increment_version.outputs.NEW_TAG }}
          git push https://${GH_TOKEN}@github.com/${{ github.repository }} ${{ steps.increment_version.outputs.NEW_TAG }}

  docker_build_and_publish:
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          VERSION=${{ needs.versioning.outputs.NEW_TAG }}
          REPO_NAME=$(basename ${{ github.repository }})
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${REPO_NAME}

          docker build -t ${DOCKER_IMAGE}:latest -t ${DOCKER_IMAGE}:${VERSION} .
          docker push ${DOCKER_IMAGE}:latest
          docker push ${DOCKER_IMAGE}:${VERSION}

  deploy_to_cloud_run:
    runs-on: ubuntu-latest
    needs: docker_build_and_publish

    steps:
      - uses: 'actions/checkout@v4'

      - uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'my-service-account@my-project.iam.gserviceaccount.com'
  
      - id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'husky-e'
          image: 'gcr.io/cloudrun/hello'
  
      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'